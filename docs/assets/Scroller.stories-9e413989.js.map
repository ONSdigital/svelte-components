{"version":3,"file":"Scroller.stories-9e413989.js","sources":["../../src/layout/Scroller/docs/component.md?raw","../../src/layout/Scroller/Scroller.svelte","../../src/layout/Scroller/ScrollerSection.svelte","../../src/layout/Scroller/Scroller.stories.svelte"],"sourcesContent":["export default \"Components for adding scrollytelling sections to a feature article.\\n\\nNote: These examples will not preview correctly in the iframes on this page. You can select the examples from the menu instead.\\n\\n```html\\n<script>\\n  import { Scroller, ScrollerSection, Grid } from \\\"@onsvisual/svelte-components\\\";\\n\\n  function updateScroller(e) {\\n    // Function to update scroller background components, using the following props:\\n    // 1. e.detail.id - the ID of the Scroller\\n    // 2. e.detail.index - the index of the current ScrollerSection\\n    // 3. e.detail.sectionId - the (optional) ID of the current ScrollerSection\\n  }\\n</script>\\n\\n<Scroller on:change=\\\"{updateScroller}\\\" id=\\\"{any_unique_id}\\\">\\n  <div slot=\\\"background\\\">\\n    <!-- \\n      The <Grid> component is optional here.\\n      It is a useful way to set the height and width of the background.\\n    -->\\n    <Grid width=\\\"full\\\" height=\\\"full\\\">\\n      <div>{background_components}</div>\\n    </Grid>\\n  </div>\\n  <div slot=\\\"foreground\\\">\\n    <ScrollerSection id=\\\"{any_unique_id}\\\">\\n      <p>First section caption.</p>\\n    </ScrollerSection>\\n    <ScrollerSection id=\\\"{any_unique_id}\\\">\\n      <p>Second section caption.</p>\\n    </ScrollerSection>\\n    <ScrollerSection id=\\\"{any_unique_id}\\\">\\n      <p>Third section caption.</p>\\n      </p>\\n    </ScrollerSection>\\n  </div>\\n</Scroller>\\n```\\n\"","<script context=\"module\">\n  // Based on svelte-scroller by Rich Harris\n  // https://github.com/sveltejs/svelte-scroller\n  // Extended to allow for split-screen mode, section IDs and on:change event\n  const handlers = [];\n  let manager;\n\n  if (typeof window !== \"undefined\") {\n    const run_all = () => handlers.forEach((fn) => fn());\n\n    window.addEventListener(\"scroll\", run_all);\n    window.addEventListener(\"resize\", run_all);\n  }\n\n  if (typeof IntersectionObserver !== \"undefined\") {\n    const map = new Map();\n\n    const observer = new IntersectionObserver(\n      (entries, observer) => {\n        entries.forEach((entry) => {\n          const update = map.get(entry.target);\n          const index = handlers.indexOf(update);\n\n          if (entry.isIntersecting) {\n            if (index === -1) handlers.push(update);\n          } else {\n            update();\n            if (index !== -1) handlers.splice(index, 1);\n          }\n        });\n      },\n      {\n        rootMargin: \"400px 0px\", // TODO why 400?\n      }\n    );\n\n    manager = {\n      add: ({ outer, update }) => {\n        const { top, bottom } = outer.getBoundingClientRect();\n\n        if (top < window.innerHeight && bottom > 0) handlers.push(update);\n\n        map.set(outer, update);\n        observer.observe(outer);\n      },\n\n      remove: ({ outer, update }) => {\n        const index = handlers.indexOf(update);\n        if (index !== -1) handlers.splice(index, 1);\n\n        map.delete(outer);\n        observer.unobserve(outer);\n      },\n    };\n  } else {\n    manager = {\n      add: ({ update }) => {\n        handlers.push(update);\n      },\n\n      remove: ({ update }) => {\n        const index = handlers.indexOf(update);\n        if (index !== -1) handlers.splice(index, 1);\n      },\n    };\n  }\n</script>\n\n<script>\n  import { onMount, createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  // config\n  /**\n   * Sets the unique ID of the scroller\n   * @type {string}\n   */\n  export let id = null;\n  /**\n   * Enables splitscreen view (captions appear on left on larger screens)\n   * @type {boolean}\n   */\n  export let splitscreen = false;\n  /**\n   * Adds a margin under the scroller section\n   * @type {boolean}\n   */\n  export let marginBottom = true;\n  /**\n   * Set the threshold for the transition between scroller sections (0-1)\n   * @type {number}\n   */\n  export let threshold = 0.7;\n\n  let top = 0;\n  let bottom = 1;\n  let query = \"section\";\n  let parallax = false;\n\n  // bindings\n  /**\n   * Binding: Total number of sections within scroller\n   * @type {number}\n   */\n  export let count = 0;\n  /**\n   * Binding: Current section index (number)\n   * @type {number}\n   */\n  export let index = 0;\n  /**\n   * Binding: Current section id, if it has one set\n   * @type {string}\n   */\n  export let sectionId = null; // ID for current section within scroller\n  /**\n   * Binding: The progress between the start of current scroller section and next (0-1)\n   * @type {number}\n   */\n  export let offset = 0;\n  /**\n   * Binding: The progress through the whole scroller (0-1)\n   * @type {number}\n   */\n  export let progress = 0;\n  /**\n   * Binding: Whether the scroller is visible on screen or not\n   * @type {boolean}\n   */\n  export let visible = false;\n\n  let outer;\n  let foreground;\n  let background;\n  let left;\n  let sections;\n  let wh = 0;\n  let fixed;\n  let offset_top = 0;\n  let width = 1;\n  let height;\n  let inverted;\n\n  $: top_px = Math.round(top * wh);\n  $: bottom_px = Math.round(bottom * wh);\n  $: threshold_px = Math.round(threshold * wh);\n\n  $: top, bottom, threshold, parallax, update();\n\n  $: style = `\n\t\tposition: ${fixed ? \"fixed\" : \"absolute\"};\n\t\ttop: 0;\n\t\ttransform: translate(0, ${offset_top}px);\n\t\tz-index: ${inverted ? 3 : 1};\n\t`;\n\n  $: widthStyle = fixed ? `width:${width}px;` : \"\";\n\n  onMount(() => {\n    sections = foreground.querySelectorAll(query);\n    count = sections.length;\n\n    update();\n\n    const scroller = { outer, update };\n\n    manager.add(scroller);\n    return () => manager.remove(scroller);\n  });\n\n  function update() {\n    if (!foreground) return;\n\n    // re-measure outer container\n    const bcr = outer.getBoundingClientRect();\n    left = bcr.left;\n    width = bcr.right - left;\n\n    // determine fix state\n    const fg = foreground.getBoundingClientRect();\n    const bg = background.getBoundingClientRect();\n\n    visible = fg.top < wh && fg.bottom > 0;\n\n    const foreground_height = fg.bottom - fg.top;\n    const background_height = bg.bottom - bg.top;\n\n    const available_space = bottom_px - top_px;\n    progress = (top_px - fg.top) / (foreground_height - available_space);\n\n    if (progress <= 0) {\n      offset_top = 0;\n      fixed = false;\n    } else if (progress >= 1) {\n      offset_top = parallax\n        ? foreground_height - background_height\n        : foreground_height - available_space;\n      fixed = false;\n    } else {\n      offset_top = parallax\n        ? Math.round(top_px - progress * (background_height - available_space))\n        : top_px;\n      fixed = true;\n    }\n\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const { top } = section.getBoundingClientRect();\n\n      const next = sections[i + 1];\n      const bottom = next ? next.getBoundingClientRect().top : fg.bottom;\n\n      offset = (threshold_px - top) / (bottom - top);\n      if (bottom >= threshold_px) {\n        if (index !== i) {\n          index = i;\n          sectionId = section.dataset.id ? section.dataset.id : null;\n          dispatch(\"change\", { id, index, sectionId });\n        }\n        break;\n      }\n    }\n  }\n</script>\n\n<svelte:window bind:innerHeight=\"{wh}\" />\n\n<svelte-scroller-outer id=\"{id}\" bind:this=\"{outer}\" class:splitscreen=\"{splitscreen}\">\n  <svelte-scroller-background-container class=\"background-container\" style=\"{style}{widthStyle}\">\n    <svelte-scroller-background bind:this=\"{background}\">\n      <slot name=\"background\" />\n    </svelte-scroller-background>\n  </svelte-scroller-background-container>\n\n  <svelte-scroller-foreground bind:this=\"{foreground}\">\n    <slot name=\"foreground\" />\n  </svelte-scroller-foreground>\n</svelte-scroller-outer>\n\n{#if marginBottom}\n  <div class=\"ons-spacer\"></div>\n{/if}\n\n<style>\n  svelte-scroller-outer {\n    display: block;\n    position: relative;\n  }\n\n  svelte-scroller-background {\n    display: block;\n    position: relative;\n    width: 100%;\n  }\n\n  svelte-scroller-foreground {\n    display: block;\n    position: relative;\n    z-index: 2;\n  }\n\n  svelte-scroller-foreground::after {\n    content: \" \";\n    display: block;\n    clear: both;\n  }\n\n  svelte-scroller-background-container {\n    display: block;\n    position: absolute;\n    width: 100%;\n    max-width: 100%;\n    pointer-events: none;\n    /* height: 100%; */\n\n    /* in theory this helps prevent jumping */\n    will-change: transform;\n    /* -webkit-transform: translate3d(0, 0, 0);\n\t\t-moz-transform: translate3d(0, 0, 0);\n\t\ttransform: translate3d(0, 0, 0); */\n  }\n\n  svelte-scroller-background-container {\n    pointer-events: all !important;\n  }\n\n  :global([slot=\"foreground\"] section) {\n    padding: 70vh 0 100vh 0;\n  }\n\n  :global([slot=\"foreground\"] section + section) {\n    padding: 0 0 100vh 0;\n  }\n\n  :global([slot=\"foreground\"] section:last-of-type) {\n    padding: 0 0 70vh 0;\n  }\n\n  :global([slot=\"foreground\"] section > div) {\n    position: relative;\n  }\n\n  :global([slot=\"foreground\"] section > div:before) {\n    background-color: var(--background, white);\n    opacity: 80%;\n  }\n\n  :global([slot=\"foreground\"] section div p) {\n    margin: 0;\n  }\n\n  :global([slot=\"foreground\"] section div p + p) {\n    margin-top: 30px;\n  }\n\n  :global([slot=\"foreground\"] section div h2),\n  :global([slot=\"foreground\"] section div h3) {\n    margin: 10px 0 20px 0;\n  }\n\n  @media (min-width: 992px) {\n    .splitscreen svelte-scroller-background {\n      width: calc(100% - 480px) !important;\n      min-width: 65%;\n      margin: 0 0 0 auto;\n    }\n    :global(.splitscreen [slot=\"foreground\"] section div::before) {\n      opacity: 0;\n    }\n    :global(.splitscreen [slot=\"foreground\"] section) {\n      width: 480px;\n      max-width: 35%;\n      margin: 0 auto 0 0;\n      background-color: var(--background, white);\n    }\n  }\n</style>\n","<script>\n  import { onMount } from \"svelte\";\n  import Container from \"$lib/wrappers/Container/Container.svelte\";\n\n  /**\n   * Sets the unique ID of the section\n   * @type {string}\n   */\n  export let id = null;\n  /**\n   * Sets a predefined theme\n   * @type {\"light\"|\"dark\"|\"lightblue\"}\n   */\n  export let theme = null;\n  /**\n   * Sets the title of the section\n   * @type {string}\n   */\n  export let title = \"\";\n  /**\n   * Allows the h2 title tag for the section to be visually hidden\n   * @type {boolean}\n   */\n  export let hideTitle = false;\n\n  let section;\n  let background;\n\n  onMount(() => {\n    background = getComputedStyle(section).getPropertyValue(\"--background\").replaceAll('\"', \"\");\n    console.log(section, getComputedStyle(section), background);\n  });\n</script>\n\n<section data-id=\"{id}\" bind:this=\"{section}\">\n  <Container theme=\"{theme}\" width=\"narrow\" background=\"none\">\n    <div class=\"ons-scroller-section\" style:--background=\"{background}\">\n      {#if title && !hideTitle}\n        <h2 class=\"section-title\">{title}</h2>\n      {/if}\n      <slot />\n    </div>\n  </Container>\n</section>\n\n<style>\n  .ons-scroller-section {\n    position: relative;\n  }\n  .ons-scroller-section::after {\n    content: \" \";\n    position: absolute;\n    z-index: -1;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: -1rem;\n    background: var(--background, white);\n    opacity: 90%;\n  }\n</style>\n","<script>\n  import { Meta, Template, Story } from \"@storybook/addon-svelte-csf\";\n\n  // @ts-ignore\n  import componentDocs from \"./docs/component.md?raw\";\n  import Scroller from \"./Scroller.svelte\";\n  import ScrollerSection from \"./ScrollerSection.svelte\";\n  import Grid from \"$lib/layout/Grid/Grid.svelte\";\n  import Em from \"$lib/decorators/Em/Em.svelte\";\n  import { withComponentDocs } from \"$lib/js/withParams.js\";\n\n  const scrollerColors = [\"#ddd\", \"#777\", \"#222\"];\n  let scrollerColor = scrollerColors[0];\n</script>\n\n<Meta\n  title=\"Layout/Scroller\"\n  component=\"{Scroller}\"\n  argTypes=\"{{}}\"\n  {...withComponentDocs(componentDocs)}\n/>\n\n<Template let:args>\n  <Scroller {...args} on:change=\"{(e) => (scrollerColor = scrollerColors[e.detail.index])}\">\n    <div slot=\"background\">\n      <Grid width=\"full\" height=\"full\">\n        <div class=\"placeholder-block\" style:background-color=\"{scrollerColor}\"></div>\n      </Grid>\n    </div>\n    <div slot=\"foreground\">\n      <ScrollerSection>\n        <p>\n          When this first caption is visible, the background will appear <Em\n            color=\"{scrollerColors[0]}\">light grey</Em\n          >.\n        </p>\n      </ScrollerSection>\n      <ScrollerSection>\n        <p>\n          When this first caption is visible, the background will appear <Em\n            color=\"{scrollerColors[1]}\">dark grey</Em\n          >.\n        </p>\n      </ScrollerSection>\n      <ScrollerSection>\n        <p>\n          When this first caption is visible, the background will appear <Em\n            color=\"{scrollerColors[2]}\">black</Em\n          >.\n        </p>\n      </ScrollerSection>\n    </div>\n  </Scroller>\n</Template>\n\n<Story name=\"Default\" args=\"{{}}\" />\n"],"names":["componentDocs","insert","target","div","anchor","ctx","create_if_block","set_custom_element_data","svelte_scroller_background_container","svelte_scroller_background_container_style_value","svelte_scroller_outer","append","svelte_scroller_background","svelte_scroller_foreground","current","dirty","handlers","manager","run_all","fn","map","observer","entries","entry","update","index","outer","top","bottom","query","dispatch","createEventDispatcher","id","$$props","splitscreen","marginBottom","threshold","count","sectionId","offset","progress","visible","foreground","background","left","sections","wh","fixed","offset_top","width","onMount","scroller","bcr","$$invalidate","fg","bg","foreground_height","available_space","bottom_px","top_px","i","section","next","threshold_px","$$value","style","widthStyle","h2","if_block","section_1","theme","title","hideTitle","p","Scroller","withComponentDocs","get_spread_object","scrollerColors","scrollerColor","e"],"mappings":"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"}