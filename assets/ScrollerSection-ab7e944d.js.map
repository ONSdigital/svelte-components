{"version":3,"file":"ScrollerSection-ab7e944d.js","sources":["../../src/layout/Scroller/Scroller.svelte","../../src/layout/Scroller/ScrollerSection.svelte"],"sourcesContent":["<script context=\"module\">\n  // Based on svelte-scroller by Rich Harris\n  // https://github.com/sveltejs/svelte-scroller\n  // Extended to allow for split-screen mode, section IDs and on:change event\n  const handlers = [];\n  let manager;\n\n  if (typeof window !== \"undefined\") {\n    const run_all = () => handlers.forEach((fn) => fn());\n\n    window.addEventListener(\"scroll\", run_all);\n    window.addEventListener(\"resize\", run_all);\n  }\n\n  if (typeof IntersectionObserver !== \"undefined\") {\n    const map = new Map();\n\n    const observer = new IntersectionObserver(\n      (entries, observer) => {\n        entries.forEach((entry) => {\n          const update = map.get(entry.target);\n          const index = handlers.indexOf(update);\n\n          if (entry.isIntersecting) {\n            if (index === -1) handlers.push(update);\n          } else {\n            update();\n            if (index !== -1) handlers.splice(index, 1);\n          }\n        });\n      },\n      {\n        rootMargin: \"400px 0px\", // TODO why 400?\n      }\n    );\n\n    manager = {\n      add: ({ outer, update }) => {\n        const { top, bottom } = outer.getBoundingClientRect();\n\n        if (top < window.innerHeight && bottom > 0) handlers.push(update);\n\n        map.set(outer, update);\n        observer.observe(outer);\n      },\n\n      remove: ({ outer, update }) => {\n        if (map.get(outer)) {\n          const index = handlers.indexOf(update);\n          if (index !== -1) handlers.splice(index, 1);\n\n          map.delete(outer);\n          observer.unobserve(outer);\n        }\n      },\n    };\n  } else {\n    manager = {\n      add: ({ update }) => {\n        handlers.push(update);\n      },\n\n      remove: ({ update }) => {\n        const index = handlers.indexOf(update);\n        if (index !== -1) handlers.splice(index, 1);\n      },\n    };\n  }\n</script>\n\n<script>\n  import { onMount, setContext, createEventDispatcher } from \"svelte\";\n  import { writable } from \"svelte/store\";\n\n  const dispatch = createEventDispatcher();\n\n  // config\n  /**\n   * Sets the unique ID of the scroller\n   * @type {string}\n   */\n  export let id = null;\n  /**\n   * Enables splitscreen view (captions appear on left on larger screens)\n   * @type {boolean}\n   */\n  export let splitscreen = false;\n  /**\n   * Adds a margin under the scroller section\n   * @type {boolean}\n   */\n  export let marginBottom = true;\n  /**\n   * Set the threshold for the transition between scroller sections (0-1)\n   * @type {number}\n   */\n  export let threshold = 0.7;\n\n  let top = 0;\n  let bottom = 1;\n  let parallax = false;\n\n  // bindings\n  /**\n   * Binding: Total number of sections within scroller\n   * @type {number}\n   */\n  export let count = 0;\n  /**\n   * Binding: Current section index (number)\n   * @type {number}\n   */\n  export let index = null;\n  /**\n   * Binding: Current section id, if it has one set\n   * @type {string}\n   */\n  export let sectionId = null; // ID for current section within scroller\n  /**\n   * Binding: The progress between the start of current scroller section and next (0-1)\n   * @type {number}\n   */\n  export let offset = 0;\n  /**\n   * Binding: The progress through the whole scroller (0-1)\n   * @type {number}\n   */\n  export let progress = 0;\n  /**\n   * Binding: Whether the scroller is visible on screen or not\n   * @type {boolean}\n   */\n  export let visible = false;\n\n  const sections = writable([]);\n  setContext(\"sections\", sections);\n\n  let scroller;\n  let outer;\n  let foreground;\n  let background;\n  let left;\n  let wh = 0;\n  let fixed;\n  let offset_top = 0;\n  let width = 1;\n  let height;\n  let inverted;\n\n  $: top_px = Math.round(top * wh);\n  $: bottom_px = Math.round(bottom * wh);\n  $: threshold_px = Math.round(threshold * wh);\n\n  $: top, bottom, threshold, parallax, update();\n\n  $: style = `\n\t\tposition: ${fixed ? \"fixed\" : \"absolute\"};\n\t\ttop: 0;\n\t\ttransform: translate(0, ${offset_top}px);\n\t\tz-index: ${inverted ? 3 : 1};\n\t`;\n\n  $: widthStyle = fixed ? `width:${width}px;` : \"\";\n\n  function initSections(sections) {\n    if (scroller) manager.remove(scroller);\n\n    count = sections.length;\n\n    update();\n\n    scroller = { outer, update };\n\n    manager.add(scroller);\n    return () => manager.remove(scroller);\n  }\n  $: outer && initSections($sections);\n\n  function update() {\n    if (!foreground) return;\n\n    // re-measure outer container\n    const bcr = outer.getBoundingClientRect();\n    left = bcr.left;\n    width = bcr.right - left;\n\n    // determine fix state\n    const fg = foreground.getBoundingClientRect();\n    const bg = background.getBoundingClientRect();\n\n    const visible_new = fg.top < wh && fg.bottom > 0;\n    const entered = visible_new && !visible;\n    const exited = !visible_new && visible;\n    visible = visible_new;\n\n    const foreground_height = fg.bottom - fg.top;\n    const background_height = bg.bottom - bg.top;\n\n    const available_space = bottom_px - top_px;\n    progress = (top_px - fg.top) / (foreground_height - available_space);\n\n    if (progress <= 0) {\n      offset_top = 0;\n      fixed = false;\n    } else if (progress >= 1) {\n      offset_top = parallax\n        ? foreground_height - background_height\n        : foreground_height - available_space;\n      fixed = false;\n    } else {\n      offset_top = parallax\n        ? Math.round(top_px - progress * (background_height - available_space))\n        : top_px;\n      fixed = true;\n    }\n\n    for (let i = 0; i < $sections.length; i++) {\n      const section = $sections[i];\n      const { top } = section.getBoundingClientRect();\n\n      const next = $sections[i + 1];\n      const bottom = next ? next.getBoundingClientRect().top : fg.bottom;\n\n      offset = (threshold_px - top) / (bottom - top);\n      if (bottom >= threshold_px) {\n        if (index !== i) {\n          index = i;\n          sectionId = section.dataset.id ? section.dataset.id : null;\n          dispatch(\"change\", { id, index, sectionId });\n        }\n        break;\n      }\n    }\n\n    if (entered) {\n      dispatch(\"enter\", { id, index, sectionId });\n      dispatch(\"change\", { id, index, sectionId });\n    }\n    if (exited) dispatch(\"exit\", { id, index, sectionId });\n  }\n</script>\n\n<svelte:window bind:innerHeight=\"{wh}\" />\n\n<svelte-scroller-outer id=\"{id}\" bind:this=\"{outer}\" class:splitscreen=\"{splitscreen}\">\n  <svelte-scroller-background-container class=\"background-container\" style=\"{style}{widthStyle}\">\n    <svelte-scroller-background bind:this=\"{background}\">\n      <slot name=\"background\" />\n    </svelte-scroller-background>\n  </svelte-scroller-background-container>\n\n  <svelte-scroller-foreground bind:this=\"{foreground}\">\n    <slot name=\"foreground\" />\n  </svelte-scroller-foreground>\n</svelte-scroller-outer>\n\n{#if marginBottom}\n  <div class=\"ons-spacer\"></div>\n{/if}\n\n<style>\n  svelte-scroller-outer {\n    display: block;\n    position: relative;\n  }\n\n  svelte-scroller-background {\n    display: block;\n    position: relative;\n    width: 100%;\n  }\n\n  svelte-scroller-foreground {\n    display: block;\n    position: relative;\n    z-index: 2;\n  }\n\n  svelte-scroller-foreground::after {\n    content: \" \";\n    display: block;\n    clear: both;\n  }\n\n  svelte-scroller-background-container {\n    display: block;\n    position: absolute;\n    width: 100%;\n    max-width: 100%;\n    pointer-events: none;\n    /* height: 100%; */\n\n    /* in theory this helps prevent jumping */\n    will-change: transform;\n    /* -webkit-transform: translate3d(0, 0, 0);\n\t\t-moz-transform: translate3d(0, 0, 0);\n\t\ttransform: translate3d(0, 0, 0); */\n  }\n\n  svelte-scroller-background-container {\n    pointer-events: all !important;\n  }\n\n  :global([slot=\"foreground\"] section) {\n    padding: 70vh 0 100vh 0;\n  }\n\n  :global([slot=\"foreground\"] section + section) {\n    padding: 0 0 100vh 0;\n  }\n\n  :global([slot=\"foreground\"] section:last-of-type) {\n    padding: 0 0 70vh 0;\n  }\n\n  :global([slot=\"foreground\"] section > div) {\n    position: relative;\n  }\n\n  :global([slot=\"foreground\"] section > div:before) {\n    background-color: var(--background, white);\n    opacity: 80%;\n  }\n\n  :global([slot=\"foreground\"] section div p) {\n    margin: 0;\n  }\n\n  :global([slot=\"foreground\"] section div p + p) {\n    margin-top: 30px;\n  }\n\n  :global([slot=\"foreground\"] section div h2),\n  :global([slot=\"foreground\"] section div h3) {\n    margin: 10px 0 20px 0;\n  }\n\n  @media (min-width: 992px) {\n    .splitscreen svelte-scroller-background {\n      width: calc(100% - 480px) !important;\n      min-width: 65%;\n      margin: 0 0 0 auto;\n    }\n    :global(.splitscreen [slot=\"foreground\"] section div::before) {\n      opacity: 0;\n    }\n    :global(.splitscreen [slot=\"foreground\"] section) {\n      width: 480px;\n      max-width: 35%;\n      margin: 0 auto 0 0;\n      background-color: var(--background, white);\n    }\n  }\n</style>\n","<script>\n  import { onMount, onDestroy, getContext } from \"svelte\";\n  import Container from \"../../wrappers/Container/Container.svelte\";\n\n  /**\n   * Sets the unique ID of the section\n   * @type {string}\n   */\n  export let id = null;\n  /**\n   * Sets a predefined theme\n   * @type {\"light\"|\"dark\"|\"lightblue\"}\n   */\n  export let theme = null;\n  /**\n   * Sets the title of the section\n   * @type {string}\n   */\n  export let title = \"\";\n  /**\n   * Allows the h2 title tag for the section to be visually hidden\n   * @type {boolean}\n   */\n  export let hideTitle = false;\n\n  let section;\n\n  const sections = getContext(\"sections\");\n\n  onMount(() => {\n    if (sections) {\n      $sections = [...$sections, section];\n    }\n  });\n\n  onDestroy(() => {\n    if (sections) {\n      $sections = $sections.filter((s) => s !== section);\n    }\n  });\n</script>\n\n<section data-id=\"{id}\" bind:this=\"{section}\">\n  <Container theme=\"{theme}\" width=\"narrow\">\n    <div class=\"ons-scroller-section\">\n      {#if title}\n        <h2 class=\"section-title\" class:ons-u-vh=\"{hideTitle}\">{title}</h2>\n      {/if}\n      <slot />\n    </div>\n  </Container>\n</section>\n\n<style>\n  .ons-scroller-section {\n    position: relative;\n  }\n  .ons-scroller-section::after {\n    content: \" \";\n    position: absolute;\n    z-index: -1;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: -1rem;\n    background: var(--background, white);\n    opacity: 90%;\n  }\n</style>\n"],"names":["insert","target","div","anchor","ctx","create_if_block","set_custom_element_data","svelte_scroller_background_container","svelte_scroller_background_container_style_value","svelte_scroller_outer","append","svelte_scroller_background","svelte_scroller_foreground","current","dirty","handlers","manager","run_all","fn","map","observer","entries","entry","update","index","outer","top","bottom","dispatch","createEventDispatcher","id","$$props","splitscreen","marginBottom","threshold","count","sectionId","offset","progress","visible","sections","writable","setContext","scroller","foreground","background","left","wh","fixed","offset_top","width","initSections","bcr","$$invalidate","fg","bg","visible_new","entered","exited","foreground_height","available_space","bottom_px","top_px","i","$sections","section","next","threshold_px","$$value","style","widthStyle","h2","section_1","theme","title","hideTitle","getContext","onMount","onDestroy","s"],"mappings":"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"}